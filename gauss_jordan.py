# -*- coding: utf-8 -*-
"""Gauss_Jordan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K-BiI0tH-o0OvSIS0RGFdoMSX_i8A109
"""

import numpy as np

def gauss_jordan(A, b):
    n = len(b)

    # Forward Elimination
    for k in range(n-1):
        for i in range(k+1, n):
            if A[i, k] != 0:
                factor = A[i, k] / A[k, k]
                for j in range(k, n):
                    A[i, j] = A[i, j] - factor * A[k, j]
                b[i] = b[i] - factor * b[k]

    # Backward Elimination
    for k in range(n-1, -1, -1):
        for i in range(k):
            if A[i, k] != 0:
                factor = A[i, k] / A[k, k]
                for j in range(n):
                    A[i, j] = A[i, j] - factor * A[k, j]
                b[i] = b[i] - factor * b[k]

        # Normalize the pivot row
        b[k] = b[k] / A[k, k]
        A[k, k] = 1

    return b

if __name__=="__main__":
  A = np.array([[4, 2, 3],
                [2, 2, 1],
                [1, 1, 1]], dtype=float)
  b = np.array([4, 6, 0], dtype=float)

  solution = gauss_jordan(A, b)
  print("Solution:", solution)