# -*- coding: utf-8 -*-
"""NewtonRaphsonMethod.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eo_sS4DIBz0zzl0Pjx3Il3pqjrJwQYqj
"""

import math

# Define the function here
def f(x:int):
  return math.cos(x)-x*(math.e**x)

def df(x:int):
  return -math.sin(x)-math.e**x-x*(math.e**x)

def modulus(c:int):
  if c < 0:
    return -1*c
  return c

def find_limit():
  a = 0
  while (True):
    if f(a) < 0 and f(a+1) > 0:
     return a, a+1
    elif f(a) > 0 and f(a+1) < 0:
      return a+1, a
    else:
      a += 1

def NewtonRaphson(x0,E,itmax):
  itnum = 1
  while(True):
    denom=df(x0)
    if denom==0:
      ier=2
      break
    x1=x0-(f(x0)/denom)
    if modulus(x1-x0)<=E:
      ier=0
      break
    if itnum==itmax:
      ier=1
      break
    else:
      itnum += 1
      x0=x1
  if ier==2:
    print("Denominator cannot be zero")
  elif ier==1:
    print("Maximum iterations reached")
  else:
    print("Root is",x1)

if __name__=="__main__":
  E = 0.00005
  l,u = find_limit()
  NewtonRaphson((l+u)/2, E, 10)