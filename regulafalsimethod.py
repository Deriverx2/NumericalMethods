# -*- coding: utf-8 -*-
"""RegulaFalsiMethod.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j06fkgOewURaW5kg7SdiyxFnnCW71_LP
"""

import math

# Define the function here
def f(x:int):
  return math.sin(x)-x+2

def modulus(c:int):
  if c < 0:
    return -1*c
  return c

def RegulaFalsi(a:int, b:int, E:float):
  fb = f(b)
  fa = f(a)
  while(True):
    c = ((a*fb)-(b*fa))/(fb-fa)
    fc = f(c)
    print(c,fc)
    if modulus(b-c) < E:
      return c
    elif f(c) <= 0:
      a = c
      fa = fc
    else:
      b = c
      fb = fc
    if c == ((a*fb)-(b*fa))/(fb-fa):
      return c

def find_limit():
  a = 1
  while (True):
    if f(a) < 0 and f(a+1) > 0:
     return a, a+1
    elif f(a) > 0 and f(a+1) < 0:
      return a+1, a
    else:
      a += 1

if __name__=="__main__":
  E = 0.0005
  l,u = find_limit()
  print("Limits are",l,u)
  print("Root is",RegulaFalsi(l,u,E))